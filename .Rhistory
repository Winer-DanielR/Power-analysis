boxplot.R
boxplot.R <- ggplot(data = ARMAdata, aes(x = Paper, y = R)) + geom_boxplot(aes(fill=Paper)) + ylab ("Predictive Correlation (R)") + xlab("Data Source") + scale_fill_brewer(palette = "Spectral") + theme_few() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
boxplot.R2 <- ggplot(data = ARMAdata, aes(x = Paper, y = R2)) + geom_boxplot(aes(fill=Paper)) + ylab (expression(paste("Predictive" ~ R^2))) + xlab("Data Source") + scale_fill_brewer(palette = "Spectral") + theme_few() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
boxplot.R2
library(readxl)
Tdata <- read_excel("Meta-Analysis/Raw_Data/Tdata.xlsx",
sheet = "all")
View(Tdata)
ggplot(data=Tdata, aes(x=change.t, y= change.f)) +geom_point() + geom_smooth(method="glm", colour="purple") + theme_few() + xlab("Change in Time") + ylab("Change in Trait Frequency")
library(ggplot)
library(ggplot2)
ggplot(data=Tdata, aes(x=change.t, y= change.f)) +geom_point() + geom_smooth(method="glm", colour="purple") + theme_few() + xlab("Change in Time") + ylab("Change in Trait Frequency")
library(ggthemes)
ggplot(data=Tdata, aes(x=change.t, y= change.f)) +geom_point() + geom_smooth(method="glm", colour="purple") + theme_few() + xlab("Change in Time") + ylab("Change in Trait Frequency")
install.packages(nlme)
install.packages("nlme")
library(nlme)
install.packages(arm)
install.packages("arm")
installed.packages("AICcmodavg")
installed.packages("lme4")
library(ggplot2)
library(lme4)
library(arm)
library(AICcmodavg)
lm.test <- lm(change.f ~ change.t, data=Tdata)
lm.test.residuals <- rstandard(lm.test)
plot(lm.test.residuals~Tdata$paper)
plot(lm.test.residuals~Tdata$paper, xlab = "Species", ylab="Standardized residuals")
library(nlme)
attach(Tdata)
lm <- lme(change.f ~ change.t, random = ~1|paper, method = "ML")
lm
lm.1 <- lme(change.f ~ change.t)
lm.1 <- lm(change.f ~ change.t)
anova(lm, lm.1)
library(usethis)
library("usethis")
install.packages("usethis")
library(usethis)
use_git_config(user.name = "janayfox", user.email = "janayfox95@gmail.com")
getwd()
wd
getwd()
# load libraries and functions
# !!!!check to make sure all packages are used
library("methylKit")
library(ggplot2)
library(reshape2)
library(gridExtra)
# load libraries and functions
# !!!!check to make sure all packages are used
library("methylKit")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(grid)
library(emdbook)
library(tidyverse)
library(dplyr)
library(LaCroixColoR)
#set working directory
setwd("~/Documents/GitHub/Power-analysis")
# using function from Wreczycka et al. 2017
# to simulate data (dataSim2 function)
source("./Scripts/functions/dataSim2.R")
# and a modified function from Wrecyzka et al. 2017
# to run the methylKit model on simulated data
source("./Scripts/functions/runModels.R")
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
#set different effect sizes
effects = c(5, 10, 15, 20, 25)
cores=20
#set different replicates
replicates = c(2,4,6,8)
set.seed(111)
#now put each list into a list for every replicate
model.res <-setNames(replicate(length(replicates), list()), replicates)
#set an index to keep track of which replicate loop is on
index=0
#iterate through each replicate
for(replicate in replicates){
# set treatment groups so that 1/2 are 1 (exposed)
# and 1/2 are 0 (control)
treatments = rep(0, replicate/2)
treatments = append(treatments, rep(1,replicate/2))
print(replicate)
#add one to the index for every turn of this loop
index <- index + 1
#iterate through each effect size
for(effect in effects){
# Effect by the treatment
print(effect)
# Generate simulated data using methylKit library and dataSim2 function
sim.methylBase = dataSim2(replicates=replicate,
sites=10000,
treatment=treatments,
percentage=1,
effect=effect,
add.info=TRUE)
# Run models using runModels function and return the matrix
# of true positives (TP), false positives (FP), true negatives (TN)
# and false negatives (FN) along with other evaluations
# add the result of the model to the model.res list
model.res[[index]][as.character(effect)] <- run.models(sim.methylBase, cores=cores,
difference=5, qvalue=0.01)
}}
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
#create function for plotting data
# takes data and y label for inputs
# gives plots as outputs
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("ylabel") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=11),
axis.title=element_text(size=13) ) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
View(sensitivity_plot)
sensitivity_plot
#create function for plotting data
# takes data and y label for inputs
# gives plots as outputs
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=11),
axis.title=element_text(size=13) ) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
View(sensitivity_plot)
sensitivity_plot
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
View(accuracy_plot)
accuracy_plot
View(f_score)
View(f_score_plot)
f_score_plot
View(specificity)
View(specificity_plot)
specificity_plot
View(sensitivity_plot)
sensitivity_plot
#set different effect sizes
effects = c(5, 10, 15, 20, 25)
cores=20
#set different replicates
replicates = c(2,4,6,8)
set.seed(111)
#now put each list into a list for every replicate
model.res <-setNames(replicate(length(replicates), list()), replicates)
#set an index to keep track of which replicate loop is on
index=0
#iterate through each replicate
for(replicate in replicates){
# set treatment groups so that 1/2 are 1 (exposed)
# and 1/2 are 0 (control)
treatments = rep(0, replicate/2)
treatments = append(treatments, rep(1,replicate/2))
print(replicate)
#add one to the index for every turn of this loop
index <- index + 1
#iterate through each effect size
for(effect in effects){
# Effect by the treatment
print(effect)
# Generate simulated data using methylKit library and dataSim2 function
sim.methylBase = dataSim2(replicates=replicate,
sites=50000,
treatment=treatments,
percentage=5,
effect=effect,
add.info=TRUE)
# Run models using runModels function and return the matrix
# of true positives (TP), false positives (FP), true negatives (TN)
# and false negatives (FN) along with other evaluations
# add the result of the model to the model.res list
model.res[[index]][as.character(effect)] <- run.models(sim.methylBase, cores=cores,
difference=5, qvalue=0.01)
}}
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
#create function for plotting data
# takes data and y label for inputs
# gives plots as outputs
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=11),
axis.title=element_text(size=13) ) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
# Get legend function (commonly used)
get_legend <- function(plot){
if (!gtable::is.gtable(plot))
plot <- ggplotGrob(plot)
gtable::gtable_filter(plot, 'guide-box', fixed=TRUE)
}
View(accuracy_plot)
accuracy_plot
View(f_score_plot)
f_score_plot
#get legend frmo one bar plot, its same for all plots
legend <- get_legend(sensitivity_plot)
View(legend)
legend
legend
grid.arrange(sensitivity_plot, specificity_plot, f_score_plot, legend)
grid.arrange(sensitivity_plot, specificity_plot, f_score_plot)
grid.arrange(sensitivity_plot, specificity_plot, f_score_plot, col=2)
grid.arrange(sensitivity_plot, specificity_plot, f_score_plot, ncol=2)
grid.arrange(sensitivity_plot, specificity_plot, f_score_plot, ncol=2,labels=c("A", "B", "C"))
grid.arrange(sensitivity_plot, specificity_plot, f_score_plot, ncol=2)
# Get legend function (commonly used)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
#get legend frmo one bar plot, its same for all plots
legend <- get_legend(sensitivity_plot)
grid_arrange_shared_legend(sensitivity_plot)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
grid_arrange_shared_legend(sensitivity_plot,specificity_plot,f_score_plot,  ncol=2, nrow=2)
grid_arrange_shared_legend(sensitivity_plot,specificity_plot,f_score_plot, accuracy_plot, ncol=2, nrow=2)
#create function for plotting data
# takes data and y label for inputs
# gives plots as outputs
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(axis.text=element_text(size=11),
axis.title=element_text(size=13) ) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
# Get legend function (commonly used)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
#get legend frmo one bar plot, its same for all plots
legend <- get_legend(sensitivity_plot)
grid.arrange(sensitivity_plot+ theme(legend.position = 'none'), specificity_plot+ theme(legend.position = 'none'), f_score_plot+ theme(legend.position = 'none'), ncol=2)
grid.arrange(sensitivity_plot+ theme(legend.position = 'none'), specificity_plot+ theme(legend.position = 'none'), f_score_plot+ theme(legend.position = 'none'), legend, ncol=2)
install.packages("lemon")
#create function for plotting data
# takes data and y label for inputs
# gives plots as outputs
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(axis.text=element_text(size=11), legend.position="none",
axis.title=element_text(size=13)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
library(lemon)
View(grid_arrange_shared_legend)
View(grid_arrange_shared_legend)
# load libraries and functions
# !!!!check to make sure all packages are used
library("methylKit")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(grid)
library(emdbook)
library(tidyverse)
library(dplyr)
library(LaCroixColoR)
library(lemon)
#set working directory
setwd("~/Documents/GitHub/Power-analysis")
# using function from Wreczycka et al. 2017
# to simulate data (dataSim2 function)
source("./Scripts/functions/dataSim2.R")
# and a modified function from Wrecyzka et al. 2017
# to run the methylKit model on simulated data
source("./Scripts/functions/runModels.R")
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
#set different effect sizes
effects = c(5, 10, 15, 20, 25)
cores=20
#set different replicates
replicates = c(2,4,6,8)
set.seed(111)
#now put each list into a list for every replicate
model.res <-setNames(replicate(length(replicates), list()), replicates)
#set an index to keep track of which replicate loop is on
index=0
#iterate through each replicate
for(replicate in replicates){
# set treatment groups so that 1/2 are 1 (exposed)
# and 1/2 are 0 (control)
treatments = rep(0, replicate/2)
treatments = append(treatments, rep(1,replicate/2))
print(replicate)
#add one to the index for every turn of this loop
index <- index + 1
#iterate through each effect size
for(effect in effects){
# Effect by the treatment
print(effect)
# Generate simulated data using methylKit library and dataSim2 function
sim.methylBase = dataSim2(replicates=replicate,
sites=50000,
treatment=treatments,
percentage=5,
effect=effect,
add.info=TRUE)
# Run models using runModels function and return the matrix
# of true positives (TP), false positives (FP), true negatives (TN)
# and false negatives (FN) along with other evaluations
# add the result of the model to the model.res list
model.res[[index]][as.character(effect)] <- run.models(sim.methylBase, cores=cores,
difference=5, qvalue=0.01)
}}
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
#create function for plotting data
# takes data and y label for inputs
# gives plots as outputs
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(axis.text=element_text(size=11), legend.position="none",
axis.title=element_text(size=13)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
library(gridExtra)
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, ncol=2)
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, accuracy_plot, ncol=2)
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot)
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, ncol=2,  nrow=2)
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, accuracy_plot, ncol=2,  nrow=2)
View(model.res)
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, accuracy_plot,
ncol=2,labels=c("A", "B")  nrow=2)
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, accuracy_plot,
ncol=2,  labels=c("A", "B"), nrow=2)
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, accuracy_plot,
ncol=2, nrow=2, labels=c("A", "B", "C", "D"))
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, accuracy_plot,
ncol=2, nrow=2)
#create function for plotting data
# takes data and y label for inputs
# gives plots as outputs
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(axis.text=element_text(size=11), legend.position="none",
axis.title=element_text(size=13)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))  + labs(fill="Effect Size")
}
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
grid_arrange_shared_legend(sensitivity_plot, specificity_plot, f_score_plot, accuracy_plot,
ncol=2, nrow=2)
box.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval)) + geom_boxplot(color="black",  fill=replicate) +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(axis.text=element_text(size=11), legend.position="none",  axis.title=element_text(size=13)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
sensitivity_plot <- box.plot(sensitivity,"Sensitivity")
View(sensitivity_plot)
#create plots for all evaluation parameters
sensitivity_box_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_box_plot <- bar.plot(specificity, "Specificity")
f_score_box_plot <- bar.plot(f_score, "F-Score")
accuracy_box_plot <- bar.plot(accuracy, "Accuracy")
grid_arrange_shared_legend(sensitivity_box_plot, specificity_box_plot, f_score_box_plot,
accuracy_box_plot, ncol=2, nrow=2)
box.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval)) + geom_boxplot(color="black",  fill=replicate) +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(axis.text=element_text(size=11), legend.position="none",  axis.title=element_text(size=13)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
sensitivity_box_plot <- box.plot(sensitivity,"Sensitivity")
View(sensitivity_box_plot)
sensitivity_box_plot
#create plots for all evaluation parameters
sensitivity_bar_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_bar_plot <- bar.plot(specificity, "Specificity")
f_score_bar_plot <- bar.plot(f_score, "F-Score")
accuracy_bar_plot <- bar.plot(accuracy, "Accuracy")
grid_arrange_shared_legend(sensitivity_bar_plot, specificity_bar_plot, f_score_bar_plot,
accuracy_bar_plot, ncol=2, nrow=2)
box.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval)) + geom_boxplot(color="black",  fill=replicate) +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(axis.text=element_text(size=11), legend.position="none",  axis.title=element_text(size=13)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
sensitivity_box_plot <- box.plot(sensitivity,"Sensitivity")
specificity_box_plot <- bar.plot(specificity, "Specificity")
f_score_box_plot <- bar.plot(f_score, "F-Score")
accuracy_box_plot <- bar.plot(accuracy, "Accuracy")
View(accuracy_box_plot)
accuracy_box_plot
#create plots for all evaluation parameters
sensitivity_bar_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_bar_plot <- bar.plot(specificity, "Specificity")
f_score_bar_plot <- bar.plot(f_score, "F-Score")
accuracy_bar_plot <- bar.plot(accuracy, "Accuracy")
grid_arrange_shared_legend(sensitivity_bar_plot, specificity_bar_plot, f_score_bar_plot,
accuracy_bar_plot, ncol=2, nrow=2)
box.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval)) + geom_boxplot(color="black",  fill=replicate) +
xlab("Sample Size") + ylab(ylabel) + ylim(0,1) + theme_bw() +
theme(axis.text=element_text(size=11), legend.position="none",  axis.title=element_text(size=13)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
sensitivity_box_plot <- box.plot(sensitivity,"Sensitivity")
specificity_box_plot <- bar.plot(specificity, "Specificity")
f_score_box_plot <- bar.plot(f_score, "F-Score")
accuracy_box_plot <- bar.plot(accuracy, "Accuracy")
View(accuracy_box_plot)
accuracy_box_plot
View(accuracy_plot)
accuracy_plot
View(accuracy_bar_plot)
accuracy_bar_plot
View(accuracy_box_plot)
sensitivity_box_plot <- box.plot(sensitivity,"Sensitivity")
specificity_box_plot <- box.plot(specificity, "Specificity")
f_score_box_plot <- box.plot(f_score, "F-Score")
accuracy_box_plot <- box.plot(accuracy, "Accuracy")
View(accuracy_box_plot)
accuracy_box_plot
View(f_score_box_plot)
f_score_box_plot
View(specificity_box_plot)
specificity_box_plot
grid_arrange_shared_legend(sensitivity_bar_plot, specificity_bar_plot, f_score_bar_plot,
accuracy_bar_plot, ncol=2, nrow=2)
