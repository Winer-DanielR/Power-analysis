accuracy <- extract.data(model.res, replicates, effects, "acc")
# load libraries and functions
# !!!!check to make sure all packages are used
library("methylKit")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(grid)
library(emdbook)
library(tidyverse)
library(dplyr)
#set working directory
setwd("~/Documents/GitHub/Power-analysis")
# using function from Wreczycka et al. 2017
# to simulate data (dataSim2 function)
source("./Scripts/functions/dataSim2.R")
# and a modified function from Wrecyzka et al. 2017
# to run the methylKit model on simulated data
source("./Scripts/functions/runModels.R")
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
#set different effect sizes
effects = c(5, 10, 15, 20, 25)
cores=20
#set different replicates
replicates = c(2,4,6,8)
set.seed(111)
#now put each list into a list for every replicate
model.res <-setNames(replicate(length(replicates), list()), replicates)
#set an index to keep track of which replicate loop is on
index=0
#iterate through each replicate
for(replicate in replicates){
# set treatment groups so that 1/2 are 1 (exposed)
# and 1/2 are 0 (control)
treatments = rep(0, replicate/2)
treatments = append(treatments, rep(1,replicate/2))
print(replicate)
#add one to the index for every turn of this loop
index <- index + 1
#iterate through each effect size
for(effect in effects){
# Effect by the treatment
print(effect)
# Generate simulated data using methylKit library and dataSim2 function
sim.methylBase = dataSim2(replicates=replicate,
sites=10000,
treatment=treatments,
percentage=1,
effect=effect,
add.info=TRUE)
# Run models using runModels function and return the matrix
# of true positives (TP), false positives (FP), true negatives (TN)
# and false negatives (FN) along with other evaluations
# add the result of the model to the model.res list
model.res[[index]][as.character(effect)] <- run.models(sim.methylBase, cores=cores,
difference=5, qvalue=0.01)
}}
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
View(f_score)
View(accuracy)
View(sensitivity)
View(sim.methylBase)
View(sensitivity)
View(model.res)
specificity <- extract.data(model.res, replicates, effects, "spec")
View(specificity)
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
View(true_positives)
true_pos_plot <- ggplot(data=true_positives, aes(x=replicate, y=eval,
fill=effect)) + geom_bar(stat="identity",position=position_dodge(),
colour="black")
View(true_pos_plot)
view(true_pos_plot)
View(true_pos_plot)
true_pos_plot <- ggplot(data=true_positives, aes(x=replicate, y=eval,
fill=effect)) + geom_bar(stat="identity",position=position_dodge(),
colour="black")
ggplot(data=true_positives, aes(x=replicate, y=eval,
fill=effect)) + geom_bar(stat="identity",position=position_dodge(),
colour="black")
ggplot(data=true_positives, aes(x=replicate, y=eval,
fill=effect)) + geom_bar(stat="identity",
position=position_dodge(), colour="black")
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
ggplot(data=true_positives, aes(x=replicate, y=eval,
fill=effect)) + geom_bar(stat="identity",
position=position_dodge(), colour="black")
ggplot(data=true_positives, aes(x=replicate, y=eval,
fill=effect)) + geom_bar(state="identity",
position=position_dodge(), colour="black")
ggplot(data=true_positives, aes(x=replicate, y=eval,
fill=effect)) + geom_bar(stat="identity",
position='dodge', colour="black")
ggplot(data=sensitivity, aes(x=replicate, y=eval,
fill=effect)) + geom_bar(stat="identity",
position='dodge', colour="black")
g
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_bar(stat="identity", position='dodge', colour="black") + xlab("Sample Size")
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_col(stat="identity",
position='dodge', colour="black") + xlab("Sample Size") +
ylab("Sensitivity")
ggplot(data=sensitivity) + geom_col(
x=replicate, y=eval, fill=effect), colour="black") + xlab("Sample Size") +
ylab("Sensitivity")
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_col(
x=replicate, y=eval, fill=effect, colour="black") +
xlab("Sample Size") + ylab("Sensitivity")
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_col(
x=replicate, y=as.factor(eval), fill=effect, colour="black") +
xlab("Sample Size") + ylab("Sensitivity")
View(accuracy)
View(f_score)
View(model.res)
View(sensitivity)
View(specificity)
View(true_positives)
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
View(accuracy)
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
View(accuracy)
View(accuracy)
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_col(
x=replicate, y=as.factor(eval), fill=effect, colour="black") +
xlab("Sample Size") + ylab("Sensitivity")
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_col(
fill=effect, colour="black") +
xlab("Sample Size") + ylab("Sensitivity")
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_col(
fill=effect, colour="black") +
xlab("Sample Size") + ylab("Sensitivity")
fill=effect, colour="black", group=effect) +
xlab("Sample Size") + ylab("Sensitivity")
View(sensitivity)
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_col(
fill=effect, colour="black", group=effect)
ggplot(data=sensitivity, aes(x=replicate, y=eval, fill=effect)) + geom_bar(
fill=effect, colour="black", group=effect)
rlang::last_error()
ggplot(sensitivity, aes(replicate, eval, fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge")
ggplot(sensitivity, aes(replicate, eval, fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge")
ggplot(sensitivity, aes(replicate, eval, fill='effect')) + geom_bar(
stat="identity", colour="black", position="dodge")
ggplot(sensitivity, aes(replicate, eval, fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge")
ggplot(sensitivity, aes(replicate, eval)) + geom_bar(
stat="identity", colour="black", position="dodge", fill=effect)
View(sensitivity)
# library
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
View(data)
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
ggplot(sensitivity, aes(replicate, eval)) + geom_bar(
stat="identity", colour="black", position="dodge", fill=effect)
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge")
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge")
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity")
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity")
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1)
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal()
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_line()
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_light()
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_classic()
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_test()
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal()
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal(legend.position=none)
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal(legend.position="none")
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal() +
theme((legend.position="none"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal() +
theme(legend.position="none")
install.packages("wesanderson")
library(wesanderson)
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal() +
theme(legend.position="none") + scale_fill_manual(values = wes_palette("Moonrise3"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal() +
theme(legend.position="none") + scale_fill_manual(values = wes_palette("Darjeeling1"))
devtools::install_github("jaredhuling/jcolors")
install.packages("jcolors")
library(jcolors)
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal() +
theme(legend.position="none") + scale_fill_manual(values = jcolors("PassionFruit"))
devtools::install_github("johannesbjork/LaCroixColoR")
library(LaCroixColoR)
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal() +
theme(legend.position="none") + scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal() +
theme(legend.position="none") + scale_fill_manual(values = lacroix_palette("KiwiSandia"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_minimal() +
theme(legend.position="none") + scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_bw() +
theme(legend.position="none") + scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element(size=12)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=12)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=10)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=10, face="bold")) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=11)) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=11),
axis.title=element_text(size=12) ) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
ggplot(sensitivity, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("Sensitivity") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=11),
axis.title=element_text(size=13) ) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("ylabel") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=11),
axis.title=element_text(size=13) ) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
View(specificity_plot)
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
View(f_score_plot)
install.packages("ggpubr")
library(ggpubr)
bar_legend <- get_legend(sensitivity_plot)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,bar_legend)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,as.grob(bar_legend))
install.packages("cowplots")
install.packages("cowplot")
library(cowplot)
# Get legend function
get_legend<-function(plot){
tmp <- ggplot_gtable(ggplot_build(plot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
#get legend frmo one bar plot, its same for all plots
legend <- get_legend(sensitivity_plot)
# Get legend function (commonly used)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
#get legend frmo one bar plot, its same for all plots
legend <- get_legend(sensitivity_plot)
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
# Get legend function (commonly used)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
#get legend frmo one bar plot, its same for all plots
legend <- get_legend(sensitivity_plot)
# Get legend function (commonly used)
g2 <- function(a.gplot){
if (!gtable::is.gtable(a.gplot))
a.gplot <- ggplotGrob(a.gplot)
gtable::gtable_filter(a.gplot, 'guide-box', fixed=TRUE)
}
#get legend frmo one bar plot, its same for all plots
legend <- g2(sensitivity_plot)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,legend, ncol=3)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,legend, ncol=2)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,legend, ncol=2, nrow=2)
# Get legend function (commonly used)
get_legend <- function(plot){
if (!gtable::is.gtable(plot))
plot <- ggplotGrob(plot)
gtable::gtable_filter(plot, 'guide-box', fixed=TRUE)
}
#get legend frmo one bar plot, its same for all plots
legend <- get_legend(sensitivity_plot)
library(gridExtra)
library(grid)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,legend, ncol=2, nrow=2)
# load libraries and functions
# !!!!check to make sure all packages are used
library("methylKit")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(grid)
library(emdbook)
library(tidyverse)
library(dplyr)
library(LaCroixColoR)
#set working directory
setwd("~/Documents/GitHub/Power-analysis")
# using function from Wreczycka et al. 2017
# to simulate data (dataSim2 function)
source("./Scripts/functions/dataSim2.R")
# and a modified function from Wrecyzka et al. 2017
# to run the methylKit model on simulated data
source("./Scripts/functions/runModels.R")
# add in functions that I wrote to extract and convert datasets
source("./Scripts/functions/extractConvert.R")
#set different effect sizes
effects = c(5, 10, 15, 20, 25)
cores=20
#set different replicates
replicates = c(2,4,6,8)
set.seed(111)
#now put each list into a list for every replicate
model.res <-setNames(replicate(length(replicates), list()), replicates)
#set an index to keep track of which replicate loop is on
index=0
#iterate through each replicate
for(replicate in replicates){
# set treatment groups so that 1/2 are 1 (exposed)
# and 1/2 are 0 (control)
treatments = rep(0, replicate/2)
treatments = append(treatments, rep(1,replicate/2))
print(replicate)
#add one to the index for every turn of this loop
index <- index + 1
#iterate through each effect size
for(effect in effects){
# Effect by the treatment
print(effect)
# Generate simulated data using methylKit library and dataSim2 function
sim.methylBase = dataSim2(replicates=replicate,
sites=10000,
treatment=treatments,
percentage=1,
effect=effect,
add.info=TRUE)
# Run models using runModels function and return the matrix
# of true positives (TP), false positives (FP), true negatives (TN)
# and false negatives (FN) along with other evaluations
# add the result of the model to the model.res list
model.res[[index]][as.character(effect)] <- run.models(sim.methylBase, cores=cores,
difference=5, qvalue=0.01)
}}
#set up separate datasets for each type of evaluation using function
true_positives <- extract.data(model.res, replicates, effects, "TP")
sensitivity <- extract.data(model.res, replicates, effects, "sens")
specificity <- extract.data(model.res, replicates, effects, "spec")
f_score <- extract.data(model.res, replicates, effects, "f_score")
accuracy <- extract.data(model.res, replicates, effects, "acc")
#create function for plotting data
# takes data and y label for inputs
# gives plots as outputs
bar.plot <- function(data, ylabel){
ggplot(data, aes(replicate, eval,fill=effect)) + geom_bar(
stat="identity", colour="black", position="dodge") +
xlab("Sample Size") + ylab("ylabel") + ylim(0,1) + theme_bw() +
theme(legend.position="none", axis.text=element_text(size=11),
axis.title=element_text(size=13) ) +
scale_fill_manual(values = lacroix_palette("PassionFruit"))
}
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
specificity_plot <- bar.plot(specificity, "Specificity")
f_score_plot <- bar.plot(f_score, "F-Score")
accuracy_plot <- bar.plot(accuracy, "Accuracy")
# Get legend function (commonly used)
get_legend <- function(plot){
if (!gtable::is.gtable(plot))
plot <- ggplotGrob(plot)
gtable::gtable_filter(plot, 'guide-box', fixed=TRUE)
}
#get legend frmo one bar plot, its same for all plots
legend <- get_legend(sensitivity_plot)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,legend, ncol=2, nrow=2)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,
legend, ncol=2, nrow=2, widths=c(2.3, 2.3, 0.8))
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,
legend, ncol=2, nrow=2, widths=c(2.3, 2.3))
detach("gridExtra")
detach(gridExtra)
detach(package:gridExtra)
detach(package:gris)
detach(package:grid)
library(cowplot)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,
legend, ncol=2, nrow=2, widths=c(2.3, 2.3))
BiocManager::install("gridExtra")
library(gridExtra)
grid.arrange(sensitivity_plot,specificity_plot,f_score_plot,
legend, ncol=2, nrow=2, widths=c(2.3, 2.3))
pdf("legend.pdf")
pdf("sensitivity_plot.pdf")
#create plots for all evaluation parameters
sensitivity_plot <- bar.plot(sensitivity,"Sensitivity")
